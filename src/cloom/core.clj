(ns cloom.core)

(defn hexify [x]
  "Convert a 0-255 number to hexadecimal, msb first."
  (let [letters [\0 \1 \2 \3 \4 \5 \6 \7 \8 \9 \a \b \c \d \e \f]
        msb (nth letters (int (/ x 16)))
        lsb (nth letters (rem x 16))
        ]
    (str msb lsb)))

(defn decify [x]
  "Convert a two character list of hexadecimals (msb first) to a single int."
  (let [letters [\0 \1 \2 \3 \4 \5 \6 \7 \8 \9 \a \b \c \d \e \f]
        values (apply hash-map (interleave letters (range 16)))
        msb (values (first x))
        lsb (values (nth x 1))
        ]
    (+ (* msb 16) lsb)))

(defn to-int32 [x]
  "Return as four bytes, lsb first."
  (map #(rem (bit-shift-right x (* % 8)) 256) (range 4)))

(defn from-int32 [bs]
  "Take list of four ints (lsb first) and turn into a single int."
  (reduce + (map #(bit-shift-left (nth bs %) (* 8 %)) (range 4))))

(defn from-int16 [bs]
  "Take list of four ints (lsb first) and turn into a single int."
  (reduce + (map #(bit-shift-left (nth bs %) (* 8 %)) (range 2))))

(defn clean-hexstring [hs]
  "Return hexstring with all spaces, newlines, and [^0-9a-f] removed."
  (filter #(#{\0 \1 \2 \3 \4 \5 \6 \7 \8 \9 \a \b \c \d \e \f} %) hs))

(defn hexstring-to-ints [hexstring]
  "Read a hexdump (generated by xxd -p) and return a list of ints."
  (let [
        hs (clean-hexstring hexstring)
        hexbytes (map #(take 2 (drop % hs)) (range 0 (count hs) 2))
        ]
    (map decify hexbytes)))

(defn read-header [hexstring]
  "Reads the header from the wad as a list of ints."
  (let [hs (clean-hexstring (take 32 hexstring))
        wad-ints (hexstring-to-ints hs)
        id (apply str (map char (take 4 wad-ints)))
        num-lumps (from-int32 (take 4 (drop 4 wad-ints)))
        info-table-offset (from-int32 (take 4 (drop 8 wad-ints)))
        dummy (println (str "id: " id))
        ]
    {:id id
     :num-lumps num-lumps
     :info-table-offset info-table-offset
     }))

(defn read-directory [hexstring header]
  "Reads the directory, given the offset and the wad-ints."
  (let [offset (* (:info-table-offset header) 2)
        num-lumps (:num-lumps header)
        hs (clean-hexstring hexstring)
        directory-hexstring (drop offset hs)
        directory-ints (hexstring-to-ints directory-hexstring)
        ]
    (for [lump (range num-lumps)]
      (let [i (* lump 16)
            lump-offset (from-int32 (take 4 (drop i directory-ints)))
            lump-size (from-int32 (take 4 (drop (+ 4 i) directory-ints)))
            lump-name (apply str (map char (take 8 (drop (+ 8 i) directory-ints))))
            ]
        {:offset lump-offset
         :size lump-size
         :name lump-name}))))

(defn read-thing [thing-ints]
  "Reads a 10 byte (in int format) thing."
  (let [x-position (from-int16 (take 2 thing-ints))
        y-position (from-int16 (take 2 (drop 2 thing-ints)))
        angle-facing (from-int16 (take 2 (drop 4 thing-ints)))
        thing-type (from-int16 (take 2 (drop 6 thing-ints)))
        flags (from-int16 (take 2 (drop 8 thing-ints)))
        ]
    {:x-position x-position
     :y-position y-position
     :angle-facing angle-facing
     :thing-type thing-type
     :flags flags
     }))


(defn read-things
  "Read a THING lump."
  ([lump-ints] (read-things lump-ints (list )))
  ([lump-ints things]
   (if (empty? lump-ints)
     things
     (recur (drop 10 lump-ints)
            (concat things (list (read-thing lump-ints)))))))

(defn read-lump [hexstring directory-entry]
  "Reads the hexstring for a lump given a directory entry."
  (let [hs (take (* 2 (:size directory-entry))
                 (drop (* 2 (:offset directory-entry)) (clean-hexstring hexstring)))
        lump-ints (hexstring-to-ints hs)
        lump-name (re-find #"^[A-Z0-9]*" (:name directory-entry))
        ]
    (case lump-name
      "THINGS" (read-things lump-ints)
      "LINEDEFS" "LINEDEFS not implemented."
      "SIDEDEFS" "SIDEDEFS not implemented."
      "VERTEXES" "VERTEXES not implemented."
      "SEGS" "SEGS not implemented."
      "SSECTORS" "SSECTORS not implemented."
      "NODES" "NODES not implemented."
      "SECTORS" "SECTORS not implemented."
      "REJECT" "REJECT not implemented."
      "BLOCKMAP" "BLOCKMAP not implemented."
      "BEHAVIOR" "BEHAVIOR not implemented."
      (str "Unrecognized lump type: " lump-name)
      )
    ))
